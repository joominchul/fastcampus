클래스
- 객체를 만드는 문법적 요소
- 첫글자를 대문자로 네이밍
class 클래스이름 {}
- 실행 순서
부생성자 호출 -> 부생성자 안에 있는 주생성자 호출(this(...)) -> init 호출 -> 부생성자 본문 실행

생성자
- 객체를 만드는 방법
- 주 생성자
    - 클래스를 통해서 객체를 만드는데 필요한 필수 재료들을 적어준다.
    - 반드시 1개만 존재. 파라미터가 없거나 부생성자가 있는 경우 생략 가능. -> 부생성자만 있는 경우 클래스 호출할 때 부생성자의 파라미터를 넣어줘야 됨.
    - class 클래스이름 constructor(파라미터 이름: 타입,..)
    - constructor 생략 가능
        - class 클래스이름 (파라미터 이름: 타입,..)
    - 기본값 설정 가능
        - class 클래스이름 constructor(파라미터 이름: 타입 = 기본값,..)
    - 속성 생략 가능
        - class 클래스이름 constructor(val 파라미터 이름: 타입,..)
    생략 가능한 걸 다 생략했을 때
        - class 클래스이름 (val 파라미터 이름: 타입,..)
- 부 생성자
    - 객체를 만들기 위한 옵션 재료 -> 주 생성자 파라미터는 필수로 포함해야 함.
    - 부 생성자는 주 생성자에게 생성을 위임해야 함.
    - 여러 개가 있을 수 있음.
    - 클래스 본문에 위치.
    class 클래스이름(주생성파라미터 이름: 타입,...){
        var 부생성속성명 = 값 -> var만 가능. init에 없는 속성은 값을 설정해 초기화를 해주어야 됨.
        constructor(주생성파라미터 이름: 타입,...부생성파라미터 이름 : 타입): this(주생성파라미터 이름,..){
            this.부생성속성명 = 부 생성자 파라미터
        }
    }
- init 블록
    - 클래스 속성(프로퍼티) 초기화 시 필요한 작업을 함.
    val 변수명:타입 -> 클래스 속성
    init{
        변수 = 클래스 파라미터
    }
    - 클래스 속성과 파라미터 이름이 같은 경우.
        - this.속성 = 파라미터
    - init 생략 방법
        - val 변수명:타입 = 클래스 파라미터

클래스 호출 - 인스턴스화
var 변수명 = 클래스명(파라미터)

getter/setter
- getter : 클래스의 속성에 접근
- setter : 클래스의 속성 값 설정
    - 클래스로 설정한 변수명.속성 = 변경값
- 기본적으로는 코틀린이 자동으로 제공해주지만, 개발자가 직접 작성할 수도 있다.
    var 속성명:타입
        get(){
            return field -> field는 속성명 변수를 가리킨다.
        }
        set(value){
            field = value
        }

lateinit : 속성 값을 나중에 설정 가능
- lateinit var 속성명:타입
- var만 가능.
- 주생성자에서는 불가능
- getter, setter 불가능
- 널러블 적용 불가능.
- 기초타입(원시자료형, primitive) 속성에는 불가능.
    -> String 제외 자료형.
- isInitialized로 초기화 여부 확인 -> 초기화 하지 않으면 오류(UninitializedPropertyAccessException) 발생
    - 초기화 여부는 런타임이 아니면 알 수 없다.
    - if(::속성명.isInitialized) 초기화 됨
    else 초기화 안 됨.

더블콜론(::)
- Reflaction 기능 : 런타임에 프로그램의 구조를 조사할 수 있는 기능.

lazy(지연 초기화)
- 사용 빈도가 낮은데 초기화가 복잡한 속성이 있을 때 사용.
    -> 초기화를 계속 미뤄 정말 필요한 순간에 초기화.
- 선언될 때나 init에서 초기화가 이루어 지는 게 아니라 실제 접근할 때 초기화가 됨.
    -> 실제 사용될 때는 초기화가 되어 있음.
- val에서만 사용 가능.
    - val 속성명:타입 by lazy{
        본문.
        값 -> 맨 마지막이 초기화 값.
    }

클래스 기능 추가 -> 내부 함수 사용.
- 클래스{
    fun 함수명
}
- _함수명 : 클래스 내부에서만 사용하기로 암묵적 약속.